- Bắt tin nhắn đến và trả lời tự động:
    - bỏ qua nếu người gửi trong blacklist
    - bỏ qua nếu nội dung tin nhắn đến có các từ spam quảng cáo

- Trong lần sử dụng đầu tiên, người dùng nên đồng ý tất cả các permission và chọn "Never ask later" để có thể sử dụng tất cả các tính năng của ứng dung.
Người dừng có thể tắt các permission bất kì lúc nào bằng cách vào application’s Settings.
- Các quyền được yêu cầu bao gồm:
    +       GET_ACCOUNTS: để đăng nhập bằng tài khoảng Google
            READ_PROFILE: phục vụ mục đích đăng nhập bằng tài khoảng Google
            READ_CONTACTS: phục vụ chức năng tự động trả lời cuộc gọi bằng SMS, tự động trả lời SMS

            RECEIVE_SMS: phục vụ chức năng tự động trả lời SMS
            READ_SMS: phục vụ chức năng tự động trả lời SMS
            SEND_SMS: phục vụ chức năng tự động trả lời SMS

            INTERNET: phục vụ việc đẩy dữ liệu GPS lên server

- Mọi dữ liệu ứng dụng sử dụng đều dùng với mục đích đảm bảo an toàn cho người dùng, nếu không tin tưởng ứng dụng, vui lòng gỡ ứng dụng. Xin cảm ơn.



- backlog
+ set default avatar for user registered by email
+
+ write policy
+ about me activity
+ change time interval for GPS to 10s
+ change distance change for GPS to 100m

- open gps setting in setting activity
//    boolean isGpsEnabled(){
//        LocationManager lm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
//        try {
//            boolean res =lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
//            MyHelper.toast(getApplicationContext(), "GPS is " + res);
//            return res;
//        }
//        catch (Exception ex){
//            Log.d("GPS Check", "FAILED");
//        }
//        return false;
//    }
//    private void checkAndTurnOnGpsPermission2() {
//        if(!isGpsEnabled()){
//            AlertDialog.Builder builder = new AlertDialog.Builder(this);
//            builder.setMessage(getResources().getString(R.string.gps_is_not_enabled));
//            builder.setPositiveButton(getResources().getString(R.string.action_ok), new DialogInterface.OnClickListener() {
//                @Override
//                public void onClick(DialogInterface dialog, int which) {
//                    dialog.dismiss();
//                    Intent gpsIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
//                    startActivity(gpsIntent);
//                    checkAndTurnOnGpsPermission2();
//                }
//            }).show();
//        }
//        else
//        {
//            startGpsServices();
//        }
//    }
//
    private void checkAndTurnOnGpsPermission() {
        Dexter.withActivity(this)
                .withPermission(Manifest.permission.ACCESS_FINE_LOCATION)
                .withListener(new PermissionListener() {
                    @Override
                    public void onPermissionGranted(PermissionGrantedResponse response) {
                        startGpsServices();
                    }

                    @Override
                    public void onPermissionDenied(PermissionDeniedResponse response) {
                        if (response.isPermanentlyDenied()) {
                            Intent intent = new Intent();
                            intent.setAction( Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                            Uri uri = Uri.fromParts("package", BuildConfig.APPLICATION_ID, null);
                            intent.setData(uri);
                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(intent);
                        }
                    }

                    @Override
                    public void onPermissionRationaleShouldBeShown(PermissionRequest permission, PermissionToken token) {
                        token.continuePermissionRequest();
                    }
                }).check();

    }